// Jared Bumgardner
// COP4634 Project 1
// Jared's Notes.txt : Contains my Dev. notes. Delete before submission.


// 5 Oct.
Program can compile with no errors.
Program can be run with './myshell' & './myshell -Debug' commands.
Program can execute simple 1-arg commands (tested working: 'ls', 'make').
Program cannot execute n-arg commands.
Program crashes on input of empty string. There is code to stop this problem but it reappeared when I started added execution code in the child processes.
Program does not update Param object of parsed Input & Output. I messed with the tokenization & broke it I'm sorry.
Program has wait calls to avoid zombies.
Program creates k processes according to args[2]
Program does not run './testme'.

Last working on Lines 58-60 in myshell.cpp.
Line 60 on (myshell.cpp) is commented out due to a type mismatch. Its probably simple but I'm sleep deprived.


|===============|
|   9/30/2020   |
|===============|
|======================================================================================================================================================>>[1]
| GRADING RUBRIC  |
|==================
|
|X       Canvas: 5 / 5pts.   [ASSUMED]
|           Individual files have been uploaded
|
|X       Makefile: 5 / 5pts.
|           Makes file works; includes clean rule
|
|        Compilation: 10 / 10pts. [ASSUMED]
|X          No errors
|
|X       Documentation / Program Structure: 10 / 10pts.
|           Follows documentation & code structure guidelines
|
|X       Tokenization: 10 / 10pts.
|           Correct, completed
|
|        Parameter Processing: pp / 10pts.
|           Correct, completed
|
|X       Creates New Process: 15 / 15pts.
|           Correct, completed
|
|        Input & Output Redirection: ior / 15pts.
|           Correct, completed
|
|X       Avoids Zombies: 10 / 10pts.
|           Correct, completed
|
|X       Midpoint Status Report + Code: 10 / 10pts.  [ASSUMED]
|           Correct, completed
|
|=========================================================
|   EXPECTED TOTAL: (pp+ior+75)                          ||
|======================================================================================================================================================>>/end[1]


|======================================================================================================================================================<<[2]
|   Project 1.pdf Notes   ||
|==========================
|
| THE PROGRAM PT. 1:
|       Must perform the following:
|X         1. Display a prompt on stdout.
|X         2. Accept a command as a string from the user (input string will terminate with a newline char).
|             The program must terminate when the 'exit' command is entered.
|X         3. Parse the input string into tokens, which are single words delimited by
|             one or more spaces, tabs, or newline chars.
|X         4. Store the tokens in a provided object shown below.
|X         5. Print the contents of the object's fields using the printParams() function, which
|             is provided & explained below, but only when the shell is started with the debug
|             option '-Debug'. Otherwise, the contents of the string will not be printed.
|X         6. Return back to Step 1.
||
|
| THE PROGRAM PT. 2:
|X      Must read input from a command line & interpret it.
|X      Must interpret an argument vector to run a specified program with its own parameter as follows:
|           - argumentVector[0] : Defines the name of a program that must be executed
|           - argumentVector[1] : Define a counter that specifies the # of times the program must be launched as a separate process/instance.
|           - All other elements in the arg. vector must be passed to the specified program.
|
|X      Upon interpreting the values in the arg. vector, shell must launch k instances of the specified program using fork() where k = argumentVector[1]/
|
|X      Shell must generate a new arg. vector for each process to become the command line args read in main(). 
|       Shell must generate a separate index for each process & pass it to the process in the new arg. vector. 
|       The program will use this index to apply a divide & conquer strategy on the data for solving a computational problem. 
|       The new index should be inserted as a separate value into the previously generated arg. vector to create a new arg. vector. 
|       You must decide whether you can use the existing arg. vector in the PAram object or create a new arg. vector to store the new values.
|
|       Shell must handle input / output redirect for the instances that it launches. 
|       For redirection of standard-in to a file, all instances must accept input from a single file during execution. 
|       However, for redirection of standard out to a file, each instance must write to a separate file. To achieve this, 
|       the shell must produce different file names using a given file name from the command line as a template. 
|       For example, the shell could generate different file names by extending the provided file name with a number that 
|       the shell appends to the name such as file1, file2, file3, etc. The shell then uses the different file names to 
|       redirect standard-out to separate files for each launches instance of the user program.
|
|       Ex.1
|       Example of how shell should work, assuming that $$$ is the prompt:
|       $$$ ./collatz 4 10000
|         // The shell must launch a local program called collatz 4 times. 
|         // The shell provides each collatz process the command line arguments to include the following:
|         // Here, i is the index of the instance that the shell forks. It should range from 0 to 3 for the corresponding instance of collatz. 
|         // Each instance of collatz may use i and 4 to decide what range of # among the specified 10000 it must process.
|
|       The shell must handle the following error cases:
|           - Users may enter an incorrect program name referring to a program that does not exist on your file system or 
|             enter a char string as the counter value that is not an integer, or enter nothing. 
|           - Your job should be to alert the user if the program you attempt to execute does not exist or if the 
|             second argument  is  not  an  integercausing  the  program  to  terminate. 
|           - Take  advantage  of  the  appropriate  system  calls mentioned  below  to  determine  if  a  program  exists  or  not. 
|           - Furthermore,  your  shell  must  handle  empty  inputs gracefully without crashing.
|
|       The shell must use system call 'waitpid()' to wait for all the processes that you launched to terminate before accepting the
|       next command. Finally, the shell must exit when you wawnt to exit.
|       For testing the shell, use the test programs 'testme' & 'collatz' from Canvas
|
|
|     Sample Test Cases:
|         testme 5 1000 >output
|         collatz 8 <input >output
|         exit
|
|
|     Suggested System Calls:
|X        getline(3)        input chars & strings
|X        strtok(3)         extract tokens from strings
|X        exec(2)           (exec1() or execlp() or execv(), ...) execute a file
|X        fork(2)           create a new process (exactly like the parent process)
|         freopen(3C)       opens a stream (change an open stream to some other file)
|X        waitpid(2)
|           or              wait for a child process to change state (or terminate)
|         wait(2)
|
|======================================================================================================================================================<</end[2]
